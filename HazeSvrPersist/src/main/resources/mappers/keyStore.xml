<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- https://ibatis.apache.org/docs/dotnet/datamapper/ch03s03.html -->

<mapper namespace="com.aurfy.haze.dao.security.KeyStoreMapper">

	<resultMap id="keyStoreMap" type="KeyStoreEntity">
		<id column="store_id" property="ID" />
		<result column="cipher_algorithm" property="cipherAlgorithm" />
		<result column="encrypted_key" property="encryptedKey" />
		<result column="salt" property="salt" />
		<result column="expiry_date" property="expiryDate" />
		<result column="ks_cr_dt" property="createDate" jdbcType="TIMESTAMP" javaType="Date" />
		<result column="ks_up_dt" property="updateDate" jdbcType="TIMESTAMP" javaType="Date" />
		
		<association property="merchant" javaType="MerchantEntity" resultMap="com.aurfy.haze.dao.infra.mer.MerchantMapper.merchantMap" />
		
	</resultMap>
	
	<insert id="insert" parameterType="KeyStoreEntity" >
		INSERT INTO keystore 
		(store_id, cipher_algorithm, encrypted_key, salt, expiry_date,
		 create_date, update_date, mer_id)
		VALUES 
		(#{ID}, #{cipherAlgorithm}, #{encryptedKey}, #{salt}, #{expiryDate},
		 #{createDate}, #{updateDate}, #{merchant.ID})
	</insert>

	<sql id="defaultSelect">
	SELECT  ks.store_id, ks.cipher_algorithm, ks.encrypted_key, ks.salt, ks.expiry_date,
	 		ks.create_date ks_cr_dt, ks.update_date ks_up_dt,
			mer.mer_id, mer.mer_name, mer.parent_id mer_parent_id, mer.abbrev mer_abbrev, mer.mer_type, mer.federal_id, mer.tax_id, mer.txn_urls,
			mer.industry, mer.mcc, mer.contact_person, mer.contact_phone, mer.contact_email, mer.effective_date,
			mer.terminate_date, mer.timezone, mer.timezone_name, mer.comments mer_comments, mer.owner_id mer_owner_id, mer.status,mer.mer_code,
			mer.create_date mer_cr_dt, mer.update_date mer_up_dt,
			addr.address_id, addr.zipcode, addr.street_name1, addr.street_name2, 
			addr.string, addr.full_name, addr.phone_no, 
			addr.owner_id addrbook_owner_id, addr.create_date addrbook_cr_dt, addr.update_date addrbook_up_dt,
			addr.city_id, addr.city_name, addr.state_id, state_name, addr.country_id, addr.country_name, addr.country_code
	 FROM keystore ks 
	 	left join merchants mer on ks.mer_id = mer.mer_id
	 	left join address_book addr on mer.address_id = addr.address_id
	</sql>

	<select id="selectOne" parameterType="string" resultMap="keyStoreMap">
		<include refid="defaultSelect"/>
		 WHERE ks.store_id = #{ID}
	</select>
	
	<select id="selectBy" resultMap="keyStoreMap">
		<include refid="defaultSelect"/>
		<where>
			<if test="filterEntity.merchant != null">
				 ks.mer_id = #{filterEntity.merchant.ID}
			</if>
			<if test="filterEntity.cipherAlgorithm != null">
				 AND ks.cipher_algorithm = #{filterEntity.cipherAlgorithm}
			</if>
		</where>
		<if test="startIndex >= 0 and fetchRows > 0">
			LIMIT #{startIndex}, #{fetchRows}
		</if>
	</select>
	
	<select id="selectAll" resultMap="keyStoreMap">
		<include refid="defaultSelect"/>
	</select>

	<sql id="defaultCount">
		SELECT count(*) FROM keystore ks 
	</sql>

	<select id="countBy" parameterType="string" resultType="int">
		<include refid="defaultCount"/>
		<where>
			<if test="filterEntity.merchant != null">
				 ks.mer_id = #{filterEntity.merchant.ID}
			</if>
		</where>
	</select>

	<select id="countAll" resultType="int">
		<include refid="defaultCount" />
	</select>

	<update id="update" parameterType="KeyStoreEntity" >
		update keystore 
	    <set>
	      <if test="cipherAlgorithm != null">cipher_algorithm = #{cipherAlgorithm},</if>
	      <if test="encryptedKey != null">encrypted_key = #{encryptedKey},</if>
	      <if test="salt != null">salt = #{salt},</if>
	      <if test="expiryDate != null">expiry_date = #{expiryDate},</if>
	      <if test="createDate != null">create_date = #{createDate},</if>
	      <if test="updateDate != null">update_date = #{updateDate},</if>
	      <if test="merchant != null">mer_id = #{merchant.ID},</if>
	    </set>
		where store_id = #{ID}
	</update>
	
	<delete id="delete" parameterType="string" >
		DELETE FROM keystore WHERE store_id = #{ID}
	</delete>
	
	<select id="selectKeyStoreByPolicy" resultMap="keyStoreMap">
		<include refid="defaultSelect"/>
		 where ks.cipher_algorithm = #{policy} 
		 <if test="merchantID != null">
			  and ks.mer_id = #{merchantID}
		 </if>
		 <if test="merchantCode != null">
			  and mer.mer_code = #{merchantCode}
		 </if>
	</select>
	
</mapper>